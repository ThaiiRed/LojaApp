@page "/categoria/index"
@page "/categoria"

<!-- Um context é um db-->
@inject LojaContext db;

<MudContainer>
    <MudText Typo="Typo.h5">Categorias</MudText>
    <MudTable Items="@Categorias" MultiSelection="true" Bordered="false" Hover="true" Filter="new Func<Categoria,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString1" Placeholder="Pesquisar categoria" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Categoria, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Categoria, object>(x=>x.Descricao)">Categoria</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.Descricao</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    // Criando uma lista do tipo categoria. O nome da lista é Categorias.
    private IEnumerable<Categoria> Categorias { get; set; }

    private Categoria? selectedItem1 = null;

    private string searchString1 = "";
    private string searchString2 = "";

    // "protected" por ser um método que já existe na página Pai. "override" por estar reescrevendo o que já existe. 
    // É bom trabalhar com métodos "async" pq ele executa mas não trava o resto do processo (podendo ser criado vários processos em paralelo)
    // Quando este metodo é invocado, aparecerá o conteúdo dele quando a -página for iniciada-!
    protected override async Task OnInitializedAsync()
    {
        // o await é usado pq é assincrono, sendo assim, tem que esperar ele executar.
        Categorias = await db.Categorias.ToListAsync();
    }
    /* Assim seria se o método fosse sync
     protected override void OnInitializedAsync()
     {
        Categorias = db.Categorias.ToList();
     }
     --------------------------------------------------------------------------------------------------------------------------------------*/

    private bool FilterFunc1(Categoria categoria) => FilterFunc(categoria, searchString1);

    private bool FilterFunc(Categoria categoria, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (categoria.Descricao.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}
